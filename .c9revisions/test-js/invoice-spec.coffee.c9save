{"ts":1341787957579,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"describe \"LineItem\", ->\n  beforeEach ->\n    @f = new LineItem\n  \n  it \"should have a default price of 100\", ->\n  \texpect(@f.get('price')).toBe 100\n  \n  it \"should have default value of 100 and quantity of 1\", ->\n    expect(@f.getTotalPrice()).toBe 100.00\n  \n  it \"calculated total price from quantity and item price\", ->\n    @f.set({quantity: 15, price: 129.99})\n    expect(@f.getTotalPrice().toFixed(2)).toBe '1949.85'\n    \n\ndescribe \"Invoice\", ->\n  beforeEach ->\n    @f = new Invoice({line_items: new LineItems(new LineItem)})\n  \n  it \"sets the date to current date for newly created\", ->\n    d = new Date\n    expect(@f.get('date').getMonth).toBe d.getMonth\n    expect(@f.get('date').getDay).toBe d.getDay\n    expect(@f.get('date').getFullYear).toBe d.getFullYear\n\n  it \"should provide formatted date while calling formattedDate()\", ->\n    @f2 = new Invoice({date:new Date('2011-09-03')})\n    expect(@f2.get('date')).toBeDefined\n    \n  describe 'newly created line items array', ->  \n    it \"should be size of 1\", ->\n      expect(@f.get('line_items').length).toBe 1\n    it \"with the length of 1 should have item price = 100.00 and quantity = 1\", ->\n      expect(@f.get('line_items').at(0)).toBeDefined()  \n      expect(@f.get('line_items').at(0).get('price')).toBeDefined()\n      expect(@f.get('line_items').at(0).get('price')).toBe 100.00\n      expect(@f.get('line_items').at(0).get('quantity')).toBe 1\n      expect(@f.getTotalPrice()).toBe 100.00\n  \n  describe 'amount calculations', ->\n    it \"should return correct price from all assigned line items\", ->\n      @f.get('line_items').add new LineItem({quantity: 10, price: 120})\n      @f.get('line_items').add new LineItem({quantity: 5, price: 19.99})\n      expect(@f.getTotalPrice()).toBe 1399.95\n      \ndescribe \"LineItemViewModel\", ->\n  beforeEach ->\n    @f = new LineItemViewModel(new LineItem)\n    \n  it \"should have a total of 100\", ->\n  \texpect(@f.quantity()).toBe 1\n  \texpect(@f.price()).toBe 100\n  \texpect(@f.total()).toBe 100\n\ndescribe \"InvoiceViewModel\", ->\n  beforeEach ->\n    @f = new InvoiceViewModel(new Invoice({line_items: new LineItems(new LineItem)}))\n    console.log @f.formatted_name()\n    console.log line for line in  @f.line_items()\n    console.log line for line in @f.lines()\n    \n  it \"should have a total of 100\", ->\n  \texpect(@f.number()).toBe '000001'\n\nclass window.InvoicesDouble extends Invoices\n  localStorage: new Store(\"invoices-test\")\n\nwindow.invoices_test = new InvoicesDouble\n\n  \ndescribe \"Invoices\", ->    \n  \n  it \"should be empty at first\", ->\n    expect(invoices_test.length).toBe 0\n    \n  it \"should save attributes successfully\", ->\n    attrs = {\n      number : '000001'    \n    }\n    invoices_test.create(attrs)\n    expect(invoices_test.length).toBe 1\n  \n  it \"should read attributes correctly from locastorage\", ->\n    expect(invoices_test.first().get('number')).toBe '000001' \n    \nfor item in invoices_test\n    item.destroy\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2927}]],"length":2927}
