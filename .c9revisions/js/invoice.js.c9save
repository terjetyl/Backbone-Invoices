{"ts":1342045148721,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Generated by CoffeeScript 1.3.3\n(function() {\n  var __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  _.extend(Backbone.Model.prototype, {\n    deepToJSON: function() {\n      var obj;\n      obj = this.toJSON();\n      _.each(_.keys(obj), function(key) {\n        if (_.isFunction(obj[key].deepToJSON)) {\n          return obj[key] = obj[key].deepToJSON();\n        }\n      });\n      return obj;\n    }\n  });\n\n  _.extend(Backbone.Collection.prototype, {\n    deepToJSON: function() {\n      return this.map(function(model) {\n        return model.deepToJSON();\n      });\n    }\n  });\n\n  window.LineItem = (function(_super) {\n\n    __extends(LineItem, _super);\n\n    function LineItem() {\n      return LineItem.__super__.constructor.apply(this, arguments);\n    }\n\n    LineItem.prototype.tax_rates = {\n      0: \"0%\",\n      0.08: \"8%\",\n      0.15: \"15%\",\n      0.25: \"25%\"\n    };\n\n    LineItem.prototype.initialize = function() {\n      var name, rate, _ref, _results;\n      this.tax_rates_option_tag = \"\";\n      _ref = this.tax_rates;\n      _results = [];\n      for (rate in _ref) {\n        name = _ref[rate];\n        _results.push(this.tax_rates_option_tag += '<option value=\"' + rate + '\">' + name + '</option>');\n      }\n      return _results;\n    };\n\n    LineItem.prototype.getTaxRatesOptionTag = function() {\n      return this.tax_rates_option_tag;\n    };\n\n    LineItem.prototype.getTotalPrice = function() {\n      var total_price;\n      total_price = this.get('price') * this.get('quantity');\n      total_price = total_price * (this.get('tax_rate') + 1);\n      return total_price;\n    };\n\n    LineItem.prototype.defaults = {\n      quantity: 1,\n      price: 100.00,\n      description: null,\n      tax_rate: 0,\n      discount: 0\n    };\n\n    return LineItem;\n\n  })(Backbone.Model);\n\n  window.LineItems = (function(_super) {\n\n    __extends(LineItems, _super);\n\n    function LineItems() {\n      return LineItems.__super__.constructor.apply(this, arguments);\n    }\n\n    LineItems.prototype.model = LineItem;\n\n    return LineItems;\n\n  })(Backbone.Collection);\n\n  window.Invoice = (function(_super) {\n\n    __extends(Invoice, _super);\n\n    function Invoice() {\n      return Invoice.__super__.constructor.apply(this, arguments);\n    }\n\n    Invoice.prototype.initialize = function() {};\n\n    Invoice.prototype.defaults = {\n      date: new Date,\n      number: '000001',\n      seller_info: null,\n      buyer_info: null,\n      line_items: new LineItems\n    };\n\n    Invoice.prototype.getTotalPrice = function() {\n      return this.get('line_items').reduce(function(memo, value) {\n        return memo + value.getTotalPrice();\n      }, 0);\n    };\n\n    Invoice.prototype.formattedDate = function() {\n      return $.format.date(this.get('date').toString(), 'dd/MM/yyyy');\n    };\n\n    Invoice.prototype.toJson = function() {\n      var json;\n      json = {\n        invoice: this.attributes\n      };\n      return _.extend(json, {\n        line_items: this.get(\"line_items\").toJSON()\n      });\n    };\n\n    Invoice.numberFormat = function(number, decimals, dec_point, thousands_sep) {\n      var dec, n, prec, s, sep, toFixedFix;\n      n = (!isFinite(+number) ? 0 : +number);\n      prec = (!isFinite(+decimals) ? 0 : Math.abs(decimals));\n      sep = (typeof thousands_sep === \"undefined\" ? \".\" : thousands_sep);\n      dec = (typeof dec_point === \"undefined\" ? \",\" : dec_point);\n      s = \"\";\n      toFixedFix = function(n, prec) {\n        var k;\n        k = Math.pow(10, prec);\n        return \"\" + Math.round(n * k) / k;\n      };\n      s = (prec ? toFixedFix(n, prec) : \"\" + Math.round(n)).split(\".\");\n      if (s[0].length > 3) {\n        s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n      }\n      if ((s[1] || \"\").length < prec) {\n        s[1] = s[1] || \"\";\n        s[1] += new Array(prec - s[1].length + 1).join(\"0\");\n      }\n      return s.join(dec);\n    };\n\n    return Invoice;\n\n  })(Backbone.Model);\n\n  window.LineItemViewModel = (function(_super) {\n\n    __extends(LineItemViewModel, _super);\n\n    function LineItemViewModel(model) {\n      var _this = this;\n      LineItemViewModel.__super__.constructor.call(this, model);\n      this.total = ko.computed(function() {\n        return _this.price() * _this.quantity();\n      });\n      this.deleteRow = function() {\n        return model.destroy();\n      };\n    }\n\n    return LineItemViewModel;\n\n  })(kb.ViewModel);\n\n  window.InvoiceViewModel = (function(_super) {\n\n    __extends(InvoiceViewModel, _super);\n\n    function InvoiceViewModel(model) {\n      var _this = this;\n      InvoiceViewModel.__super__.constructor.call(this, model);\n      this.formatted_name = kb.formattedObservable(\"{0}...cool!\", this.number());\n      this.lines = kb.collectionObservable(model.get('line_items'), {\n        view_model: LineItemViewModel\n      });\n      this.total = ko.computed(function() {\n        var line, total, _i, _len, _ref;\n        total = 0;\n        _ref = _this.lines();\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          line = _ref[_i];\n          total += line.total();\n        }\n        return total;\n      });\n      this.addRow = function() {\n        return model.get('line_items').add(new LineItem);\n      };\n    }\n\n    return InvoiceViewModel;\n\n  })(kb.ViewModel);\n\n  window.Invoices = (function(_super) {\n\n    __extends(Invoices, _super);\n\n    function Invoices() {\n      return Invoices.__super__.constructor.apply(this, arguments);\n    }\n\n    Invoices.prototype.model = Invoice;\n\n    Invoices.prototype.localStorage = new Store(\"invoices\");\n\n    return Invoices;\n\n  })(Backbone.Collection);\n\n  window.invoices = new Invoices;\n\n  window.InvoiceIndex = (function(_super) {\n\n    __extends(InvoiceIndex, _super);\n\n    function InvoiceIndex() {\n      return InvoiceIndex.__super__.constructor.apply(this, arguments);\n    }\n\n    InvoiceIndex.prototype.initialize = function() {\n      _.bindAll(this, 'render');\n      return this.template = _.template($('#invoice-list-template').html());\n    };\n\n    InvoiceIndex.prototype.render = function() {\n      var rendered_content;\n      rendered_content = this.template({\n        collection: this.collection\n      });\n      $(this.el).html(rendered_content);\n      $('#app-container').html($(this.el));\n      return this;\n    };\n\n    return InvoiceIndex;\n\n  })(Backbone.View);\n\n  window.InvoiceForm = (function(_super) {\n\n    __extends(InvoiceForm, _super);\n\n    function InvoiceForm() {\n      return InvoiceForm.__super__.constructor.apply(this, arguments);\n    }\n\n    InvoiceForm.prototype.events = {\n      \"click .save-invoice\": \"handleSubmit\",\n      \"click .new-line-item\": \"newRow\"\n    };\n\n    InvoiceForm.prototype.initialize = function() {\n      _.bindAll(this, 'render');\n      return this.template = _.template($('#invoice-form-template').html());\n    };\n\n    InvoiceForm.prototype.render = function() {\n      var collection, i, item, rendered_content, view, _i, _len, _ref;\n      rendered_content = this.template({\n        model: this.model\n      });\n      $(this.el).html(rendered_content);\n      $('#app-container').html($(this.el));\n      collection = ((_ref = this.model.get('line_items')) != null ? _ref : this.model.get('line_items')) || this.model.line_items;\n      for (_i = 0, _len = collection.length; _i < _len; _i++) {\n        item = collection[_i];\n        i = new LineItem(item);\n        view = new LineItemView({\n          model: i\n        });\n        this.$('.line-items').append(view.render().el);\n      }\n      return this;\n    };\n\n    InvoiceForm.prototype.handleSubmit = function(e) {\n      var data;\n      data = {\n        date: this.$(\"input[name='date']\").val(),\n        number: this.$(\"input[name='number']\").val(),\n        buyer_info: this.$(\"textarea[name='buyer_info']\").val(),\n        seller_info: this.$(\"textarea[name='seller_info']\").val(),\n        line_items: this.model.line_items.toJSON()\n      };\n      if (this.model.isNew()) {\n        invoices.create(data);\n      } else {\n        this.model.save(data);\n      }\n      e.preventDefault();\n      e.stopPropagation();\n      return $(this.el).fadeOut('fast', function() {\n        return window.location.hash = \"#\";\n      });\n    };\n\n    InvoiceForm.prototype.newRow = function(e) {\n      var item, view;\n      item = new LineItem;\n      this.model.line_items.add(item);\n      view = new LineItemView({\n        model: item\n      });\n      this.$('.line-items').append(view.render().el);\n      return e.preventDefault();\n    };\n\n    return InvoiceForm;\n\n  })(Backbone.View);\n\n  window.LineItemView = (function(_super) {\n\n    __extends(LineItemView, _super);\n\n    function LineItemView() {\n      return LineItemView.__super__.constructor.apply(this, arguments);\n    }\n\n    LineItemView.prototype.tagName = \"tr\";\n\n    LineItemView.prototype.events = {\n      \"click .remove-line-item\": \"removeRow\",\n      \"change input\": \"fieldChanged\",\n      \"change select\": \"selectionChanged\"\n    };\n\n    LineItemView.prototype.initialize = function() {\n      _.bindAll(this, 'render');\n      this.template = _.template($('#line-item-template').html());\n      return this.model.bind('change', this.render);\n    };\n\n    LineItemView.prototype.render = function() {\n      var rendered_content;\n      rendered_content = this.template({\n        model: this.model\n      });\n      $(this.el).html(rendered_content);\n      return this;\n    };\n\n    LineItemView.prototype.removeRow = function(e) {\n      $(this.el).fadeOut('slow', function() {\n        return $(this.el).remove();\n      });\n      return e.preventDefault();\n    };\n\n    LineItemView.prototype.fieldChanged = function(e) {\n      var data, field;\n      field = $(e.currentTarget);\n      data = {};\n      data[field.attr('name')] = field.val();\n      return this.model.set(data);\n    };\n\n    LineItemView.prototype.selectionChanged = function(e) {\n      var data, field, value;\n      field = $(e.currentTarget);\n      value = $(\"option:selected\", field).val();\n      data = {};\n      data[field.attr('name')] = value;\n      return this.model.set(data);\n    };\n\n    return LineItemView;\n\n  })(Backbone.View);\n\n  window.App = (function(_super) {\n\n    __extends(App, _super);\n\n    function App() {\n      return App.__super__.constructor.apply(this, arguments);\n    }\n\n    App.prototype.routes = {\n      \"\": \"index\",\n      \"invoices/:id\": \"edit\",\n      \"new\": \"newInvoice\"\n    };\n\n    App.prototype.initialize = function() {\n      return this.invoiceIndex = new InvoiceIndex({\n        collection: invoices\n      });\n    };\n\n    App.prototype.index = function() {\n      this.clearMenuActiveClass();\n      this.invoiceIndex.render();\n      return $('#list-invoices-menu-item').addClass('active');\n    };\n\n    App.prototype.newInvoice = function() {\n      this.clearMenuActiveClass();\n      this.newInvoiceForm = new InvoiceForm({\n        model: new Invoice\n      });\n      this.newInvoiceForm.render();\n      return $('#new-invoice-menu-item').addClass('active');\n    };\n\n    App.prototype.edit = function(id) {\n      var inv;\n      inv = invoices.getByCid(id);\n      this.editInvoiceForm = new InvoiceForm({\n        model: inv\n      });\n      return this.editInvoiceForm.render();\n    };\n\n    App.prototype.clearMenuActiveClass = function() {\n      var li, _i, _len, _ref, _results;\n      _ref = $('#navigation ul li');\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        li = _ref[_i];\n        _results.push($(li).removeClass('active'));\n      }\n      return _results;\n    };\n\n    return App;\n\n  })(Backbone.Router);\n\n  $(document).ready(function() {\n    window.app = new App;\n    return Backbone.history.start();\n  });\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":11859}]],"length":11859}
