{"ts":1342045148775,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"_.extend Backbone.Model::, deepToJSON: ->\n  obj = @toJSON()\n  _.each _.keys(obj), (key) ->\n    obj[key] = obj[key].deepToJSON()  if _.isFunction(obj[key].deepToJSON)\n  \n  obj\n\n_.extend Backbone.Collection::, deepToJSON: ->\n  @map (model) ->\n    model.deepToJSON()\n\n# ------------------------------------------------------\n# Models\n# ------------------------------------------------------\n\nclass window.LineItem extends Backbone.Model\n  tax_rates:\n    0: \"0%\"\n    0.08: \"8%\"\n    0.15: \"15%\"\n    0.25: \"25%\"\n      \n  initialize: ->\n    @tax_rates_option_tag = \"\"    \n    @tax_rates_option_tag += '<option value=\"' + rate + '\">' + name + '</option>' for rate, name of @tax_rates     \n    \n  getTaxRatesOptionTag: ->\n    @tax_rates_option_tag\n  \n  getTotalPrice: ->\n    total_price = @get('price') * @get('quantity')\n    total_price = total_price * (@get('tax_rate') + 1)\n    total_price\n        \n  defaults:\n    quantity: 1\n    price: 100.00\n    description: null\n    tax_rate: 0\n    discount: 0\n\n\nclass window.LineItems extends Backbone.Collection\n  model: LineItem\n\n\nclass window.Invoice extends Backbone.Model\n\n  initialize: ->\n\n  defaults:\n    date: new Date\n    number: '000001'\n    seller_info: null\n    buyer_info: null\n    line_items: new LineItems\n    \n  getTotalPrice: ->\n    @get('line_items').reduce (memo, value) ->\n    \tmemo + value.getTotalPrice()\n    ,0\n  \n  formattedDate: ->\n    $.format.date(@get('date').toString(), 'dd/MM/yyyy')\n  \n  toJson: ->\n    json = {invoice : @attributes};\n    _.extend(json, {line_items: @get(\"line_items\").toJSON()})\n\n  @numberFormat: (number, decimals, dec_point, thousands_sep) ->\n    n = (if not isFinite(+number) then 0 else +number)\n    prec = (if not isFinite(+decimals) then 0 else Math.abs(decimals))\n    sep = (if (typeof thousands_sep == \"undefined\") then \".\" else thousands_sep)\n    dec = (if (typeof dec_point == \"undefined\") then \",\" else dec_point)\n    s = \"\"\n    toFixedFix = (n, prec) ->\n      k = Math.pow(10, prec)\n      \"\" + Math.round(n * k) / k\n\n    s = (if prec then toFixedFix(n, prec) else \"\" + Math.round(n)).split(\".\")\n    s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep)  if s[0].length > 3\n    if (s[1] or \"\").length < prec\n      s[1] = s[1] or \"\"\n      s[1] += new Array(prec - s[1].length + 1).join(\"0\")\n    s.join dec\n\n# ------------------------------------------------------\n# Knockback viewModels\n# ------------------------------------------------------\n\nclass window.LineItemViewModel extends kb.ViewModel\n  constructor: (model) ->\n    super(model)  # call super constructor: @name, @_email, and @_date created in super from the model attributes\n    @total = ko.computed =>\n    \t@price() * @quantity()\n    @deleteRow = => model.destroy()\n    \t\nclass window.InvoiceViewModel extends kb.ViewModel\n  constructor: (model) ->\n    super(model)  # call super constructor: @name, @_email, and @_date created in super from the model attributes\n    @formatted_name = kb.formattedObservable(\"{0}...cool!\", @number())\n    @lines = kb.collectionObservable(model.get('line_items'), { view_model: LineItemViewModel })\n    @total = ko.computed =>\n    \ttotal = 0\n    \ttotal += line.total() for line in @lines()\n    \ttotal\n    @addRow = -> \n    \tmodel.get('line_items').add new LineItem\n    \t\t\n\n# ------------------------------------------------------\n# Collections\n# ------------------------------------------------------\n\nclass window.Invoices extends Backbone.Collection\n  model: Invoice \n  localStorage: new Store(\"invoices\")\n\nwindow.invoices = new Invoices\n    \n    \n# ------------------------------------------------------\n# Views\n# ------------------------------------------------------    \n    \nclass window.InvoiceIndex extends Backbone.View\n  initialize:  ->\n    _.bindAll(@, 'render')    \n    @template = _.template($('#invoice-list-template').html())    \n\n  render: ->\n    rendered_content = @template({collection: @collection})  \n    $(@.el).html(rendered_content)\n    $('#app-container').html($(@.el))\n    @  \n\n\nclass window.InvoiceForm extends Backbone.View\n  events: \n    \"click .save-invoice\" : \"handleSubmit\"\n    \"click .new-line-item\" : \"newRow\"\n\n  initialize: ->\n    _.bindAll(@, 'render')    \n    @template = _.template($('#invoice-form-template').html())    \n    \n  render: ->\n    rendered_content = @template({model: @model})  \n    $(@.el).html rendered_content\n         \n    $('#app-container').html($(@.el))    \n    \n    collection = @model.get('line_items') ? @model.get('line_items') || @model.line_items\n    \n    \n    for item in collection\n      i = new LineItem(item)\n      view = new LineItemView({model: i})\n      @$('.line-items').append view.render().el    \n    @\n\n  handleSubmit: (e) ->        \n    data = { \n      date : @$(\"input[name='date']\").val(), \n      number : @$(\"input[name='number']\").val(), \n      buyer_info : @$(\"textarea[name='buyer_info']\").val(), \n      seller_info : @$(\"textarea[name='seller_info']\").val(),\n      line_items: @model.line_items.toJSON()\n    }    \n\n    if @model.isNew()\n      invoices.create(data)\n    else\n      @model.save(data)\n  \n    e.preventDefault()\n    e.stopPropagation()    \n    $(@el).fadeOut 'fast', ->\n      window.location.hash = \"#\"\n    \n  newRow: (e) ->\n    item = new LineItem\n    @model.line_items.add(item)\n    view = new LineItemView({model: item})\n    \n    @$('.line-items').append(view.render().el)\n    e.preventDefault()\n\n    \n      \nclass window.LineItemView extends Backbone.View\n  tagName: \"tr\"\n  events: \n    \"click .remove-line-item\" : \"removeRow\"\n    \"change input\": \"fieldChanged\"\n    \"change select\": \"selectionChanged\"\n    \n  initialize:  ->\n    _.bindAll @, 'render'\n    @template = _.template $('#line-item-template').html()\n    @model.bind 'change', @render\n    \n  render: ->    \n    rendered_content = @template({model: @model})  \n    $(@.el).html rendered_content\n    @\n    \n  removeRow: (e) ->\n    $(@.el).fadeOut 'slow', ->\n      $(@el).remove()   \n    e.preventDefault()\n\n  \n  fieldChanged: (e) ->\n    field = $(e.currentTarget);\n    data = {}\n    data[field.attr('name')] = field.val()\n    @model.set(data)\n    \n  selectionChanged: (e) ->\n    field = $(e.currentTarget)        \n    value = $(\"option:selected\", field).val()\n    data = {}\n    data[field.attr('name')] = value\n    @model.set(data)\n    \n\n# ------------------------------------------------------\n# Routers\n# ------------------------------------------------------\n  \nclass window.App extends Backbone.Router\n  routes :            \n    \"\" : \"index\"\n    \"invoices/:id\" : \"edit\"\n    \"new\" : \"newInvoice\"\n\n  initialize: ->\n    @invoiceIndex = new InvoiceIndex({collection: invoices})\n    \n  index: ->      \n    @clearMenuActiveClass()\n    @invoiceIndex.render()\n    $('#list-invoices-menu-item').addClass 'active'\n  \n  newInvoice: -> \n    @clearMenuActiveClass()\n    @newInvoiceForm = new InvoiceForm({model: new Invoice})  \n    @newInvoiceForm.render()\n    $('#new-invoice-menu-item').addClass 'active'\n  \n  edit: (id) ->\n    inv = invoices.getByCid(id)\n    @editInvoiceForm = new InvoiceForm({model: inv})\n    @editInvoiceForm.render()\n  \n  clearMenuActiveClass: ->\n    $(li).removeClass('active') for li in $('#navigation ul li')\n\n  \n\n$(document).ready ->\n  window.app = new App\n  Backbone.history.start()\n  \n"]],"start1":0,"start2":0,"length1":0,"length2":7245}]],"length":7245}
